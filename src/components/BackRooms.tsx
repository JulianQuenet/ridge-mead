/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 backRooms.glb 
*/

import { useGLTF } from "@react-three/drei";
import { useEffect, useState } from "react";
import { Mesh, MeshStandardMaterial } from "three";

export function Model(props: any) {
  const { scene, nodes, materials }: any = useGLTF("/backRooms.glb");
  const [use, setUse] = useState<Boolean>(false);

  if (materials.Wall && materials.Columns) {
    materials.Wall.side = 0;
    materials.Wall.roughness = 0.35;
    materials.Columns.roughness = 0.45;
    materials.paper_bake.roughness = 0.1;
  }

  useEffect(() => {
    for (const [keys, values] of Object.entries<MeshStandardMaterial>(
      materials
    )) {
      if (keys !== "paper_bake") {
        values.side = 0;
      }
      setInterval(() => {
        setUse(true);
      }, 15000);
    }
  }, [materials, nodes, scene]);

  return (
    <group {...props} dispose={null}>
      <group
        position={[-6.011, 0.219, 40.157]}
        rotation={[Math.PI, -1.563, Math.PI]}
        scale={[2.319, 1.849, 2.073]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials.SkirtNew}
          position={[0, -0.09, 0]}
        />
      </group>
      <group
        position={[-5.165, 1.145, 42.135]}
        rotation={[-Math.PI, 0.008, -Math.PI]}
        scale={[2.073, 1.849, 2.319]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_48.geometry}
          material={use? materials.Wall : materials.Columns}
          position={[0, -0.03, 0]}
        />
      </group>
      <group
        position={[0.473, 0.016, 55.112]}
        rotation={[-Math.PI / 2, 0, -0.006]}
        scale={[0.005, 0.004, 0.005]}
      >
        <group position={[0, 0.002, 0]} rotation={[Math.PI / 2, 0, 0]}>
          <group
            position={[-1000, 0, -0.001]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.defaultMaterial002.geometry}
              material={materials.cl_body_mat}
              rotation={[0, 0, -0.149]}
            />
          </group>
          <group
            position={[100, 0, -0.001]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.defaultMaterial001.geometry}
              material={materials.cl_body_mat}
              rotation={[0, 0, -0.138]}
            />
          </group>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.defaultMaterial003.geometry}
            material={materials.cl_body_mat}
            position={[-460, 66.507, -0.001]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.defaultMaterial.geometry}
            material={materials.cl_body_mat}
            position={[600, 0, -0.001]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
      <group
        position={[-24.039, 0.089, 8.697]}
        rotation={[3.137, -0.595, -1.648]}
        scale={[0.015, 0.006, 0.013]}
      >
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            geometry={nodes.crowbar_crowbar_0.geometry}
            material={materials.crowbar}
            scale={100}
          />
        </group>
      </group>
      <group
        position={[20.07, 0, 6.762]}
        rotation={[-Math.PI / 2, 0, 1.554]}
        scale={[1.025, 1.278, 1.037]}
      >
        <mesh
          geometry={nodes.Cube_0.geometry}
          material={materials.walls_bake}
          position={[0, 0, 1.029]}
        />
        <mesh
          geometry={nodes.Cube001_0.geometry}
          material={materials.dresser_bake}
          position={[0.452, 2.386, 1.097]}
        />
        <mesh
          geometry={nodes.Cube002_cell008_0.geometry}
          material={materials.mirror}
          position={[0.208, 2.939, 2.309]}
        />
        <mesh
          geometry={nodes.Cube003_0.geometry}
          material={materials.paper_bake}
          position={[-8.131, -1.181, 0.288]}
        />
        <mesh
          geometry={nodes.Cylinder002_0.geometry}
          material={materials.cans_bake}
          position={[-1.196, -1.796, 0.094]}
          rotation={[-1.49, -1.388, -3.062]}
        />
      </group>
      {use && (
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002.geometry}
          material={materials.Columns}
          position={[8.231, 1.763, 22.968]}
          rotation={[-Math.PI / 2, 0, Math.PI]}
          scale={[1.197, 4.638, 1.37]}
        />
      )}
      <mesh
        receiveShadow
        geometry={nodes.Plane.geometry}
        material={materials.Floor}
        position={[-5.083, 0, 42.914]}
        scale={[20.123, 2.012, 20.123]}
      />
      <mesh
        geometry={nodes.Plane001.geometry}
        material={materials.paper_bake}
        position={[-6.466, 3.684, 43.045]}
        scale={[19.762, 2.012, 20.922]}
      />
      {use && (
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={materials.Columns}
          position={[-5.669, 1.976, 42.462]}
          rotation={[Math.PI, -1.563, Math.PI]}
          scale={[2.319, 1.849, 2.073]}
        />
      )}
    </group>
  );
}

useGLTF.preload("/backRooms.glb");
