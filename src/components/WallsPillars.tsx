/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 wallsPillars.glb 
*/
import { PositionalAudio, useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import { useEffect, useRef, useState } from "react";
import { MeshStandardMaterial } from "three";
import { useFrame } from "@react-three/fiber";
import * as THREE from "three"
import { buffer } from 'three/examples/jsm/nodes/Nodes.js';

interface triggerProps {
  room: Boolean;
  support: Boolean;
  soccer: Boolean;
}

export function Walls(props: triggerProps) {
  const { scene, nodes, materials }: any = useGLTF("/wallsPillars1.glb");
  const { room, support, soccer } = props;
  const [once, setOnce] = useState<Boolean>(true);
  const ballRef = useRef<any>();
  const soundRef = useRef<any>();
  useEffect(() => {
    for (const [keys, values] of Object.entries<MeshStandardMaterial>(
      materials
    )) {
      if (keys == "Pillars.003") {
        values.roughness = 0.75;
      }
    }
  }, [materials, nodes, scene]);

  useFrame(() => {
    if (soccer && once && ballRef.current) {
      ballRef.current.setLinvel({ x: 0, z: 1, y: 0 }, true);
      setTimeout(() => {
        setOnce(false);
      }, 100);
     soundRef.current.setBuffer(buffer)
     soundRef.current.setRolloffFactor(8.5)
    }
  });
 const listener = new THREE.AudioListener();
  return (
    <group dispose={null}>
      {support && (
        <RigidBody type="fixed" colliders={"trimesh"}>
          <group
            position={[-0.75, 2.0991, 40.5]}
            rotation={[Math.PI, -1.563, Math.PI]}
            scale={[2.319, 1.849, 2.073]}
          >
            <mesh
              geometry={nodes.Object_14.geometry}
              material={materials["Pillars.001"]}
              position={[0, 0.012, 0]}
            />
          </group>
        </RigidBody>
      )}

      {support && (
        <group rotation={[-Math.PI / 2, 0, 0]} scale={0.104}>
          <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
              <mesh
                geometry={nodes.body_lp_body_0.geometry}
                material={materials["body.001"]}
                position={[115, -290, -10]}
                rotation={[0, 0.08, -1.529]}
                scale={[1.55, 1.5, 1.65]}
              />
            </group>
          </group>
        </group>
      )}

      <group
        position={[2.5, 2.099, 50.2]}
        rotation={[Math.PI, 0, -Math.PI / 2]}
        scale={[2, 1, 0.961]}
      >
        {!soccer && (
          <RigidBody type="fixed" colliders={"trimesh"}>
            <mesh
              geometry={nodes["F-material001"].geometry}
              material={materials["walls.001"]}
            />
          </RigidBody>
        )}

        {soccer && (
          <>
            <RigidBody type="fixed" colliders={"trimesh"}>
              <mesh
                geometry={nodes["F-material001_2"].geometry}
                material={materials["walls.002"]}
              />
            </RigidBody>
            <mesh
              geometry={nodes["F-material001_1"].geometry}
              material={materials["board.001"]}
            />
          </>
        )}
      </group>

      {room && (
        <RigidBody type="fixed" colliders="trimesh">
          <mesh
            geometry={nodes["F-material023"].geometry}
            material={materials["walls.001"]}
            position={[10, 2.099, 45.587]}
            rotation={[0, 1.567, 1.571]}
            scale={[2, 1, 0.512]}
          />
        </RigidBody>
      )}

      {soccer && (
        <RigidBody type="dynamic" colliders="ball" ref={ballRef}>

            <mesh
            geometry={nodes.defaultMaterial.geometry}
            material={materials["defaultMat.001"]}
            position={[-6.5, 1.5, 44.316]}
            scale={0.1875}
          />

        </RigidBody>
      )}

      {support && (
        <RigidBody type="fixed" colliders="trimesh">
          <group
            position={[6.65, 0, 50.35]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={[3.75, 1, 1.9]}
          >
            <mesh
              geometry={nodes.Glass_Door002_Glass_0.geometry}
              material={materials.Glass}
            />
            <mesh
              geometry={nodes.Glass_Door002_Metal_0.geometry}
              material={materials.Metal}
            />
          </group>
        </RigidBody>
      )}

     { soccer && <mesh position={[-6,1,44]}>
     <PositionalAudio
          autoplay
          ref={soundRef}
          loop={false}
          listener={listener}
          load={THREE.AudioLoader}
          url="./sounds/game.mp3"
          />
     </mesh>}
    </group>
  );
}

useGLTF.preload("/wallsPillars1.glb");
