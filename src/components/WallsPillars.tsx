/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 wallsPillars.glb 
*/
import { useGLTF } from "@react-three/drei";
import { RigidBody } from "@react-three/rapier";
import { useEffect } from "react";
import { MeshStandardMaterial } from "three";

interface triggerProps {
  room: Boolean;
  support: Boolean;
  audio: Boolean
}

export function Walls(props: triggerProps) {
  const { scene, nodes, materials }: any = useGLTF("/wallsPillars1.glb");
  const { room, support, audio } = props;

  useEffect(() => {
    for (const [keys, values] of Object.entries<MeshStandardMaterial>(
      materials
    )) {
      if (keys == "Pillars.003") {
        values.roughness = 0.75;
      }
    }
  }, [materials, nodes, scene]);

  return (
    <group dispose={null}>
     { audio  && (<RigidBody type="fixed" colliders="trimesh">
     <group position={[6.775, 0.345, 46.003]} rotation={[-Math.PI / 2, 0, Math.PI / 2]} scale={[50, 58.92, 42.5]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[7.731, 3.308, 2.861]} scale={0.545}>
            <mesh geometry={nodes.blood_container_low_blood_container_non_sculpt_0.geometry} material={materials.blood_container_non_sculpt} />
            <mesh geometry={nodes.blood_container_low_blood_container_sculpt_0.geometry} material={materials.blood_container_sculpt} />
          </group>
          <group position={[7.097, -0.056, -2.936]} rotation={[0, -0.422, 0]} scale={0.766}>
            <mesh geometry={nodes.polySurface22_chair_0.geometry} material={materials.chair} position={[0.788, 0, 1.653]} rotation={[0, -0.244, 0]} />
          </group>
          <mesh geometry={nodes.blood_extractor_blood_extractor1_0.geometry} material={materials.blood_extractor1} position={[2.153, 3.63, -0.766]} rotation={[1.509, -0.042, -1.891]} scale={0.09} />
          <mesh geometry={nodes.cabinet_1_cabinet_0.geometry} material={materials.cabinet} />
          <mesh geometry={nodes.cabinet_3_cabinet_0.geometry} material={materials.cabinet} position={[-1.052, 0, -4.296]} rotation={[0, 0.325, 0]} />
          <mesh geometry={nodes.combinedwindow_glass_0.geometry} material={materials.glass} />
          <mesh geometry={nodes.combinedwindow_window_0.geometry} material={materials.window} />
          <mesh geometry={nodes.corkboard_cork_board_0.geometry} material={materials.cork_board} />
          <mesh geometry={nodes.cup_of_noodles_noodles_0.geometry} material={materials.noodles} />
          <mesh geometry={nodes.dissection_table_dissection_table1_0.geometry} material={materials.dissection_table1} position={[1.135, 0.444, -1.627]} scale={0.631} />
          <mesh geometry={nodes.kindey_ash_tray_complete_ashtray_0.geometry} material={materials.ashtray} position={[4.439, 3.539, -0.981]} rotation={[-0.007, -0.356, 0.071]} scale={0.162} />
          <mesh geometry={nodes.microwave_microwave1_0.geometry} material={materials.microwave1} position={[7.046, 2.966, -4.037]} rotation={[0, -1.321, 0]} scale={0.808} />
          <mesh geometry={nodes.roombase_room_0.geometry} material={materials.room} />
          <mesh geometry={nodes.surgical_lamp_lamp_0.geometry} material={materials.lamp} />
        </group>
      </group>
      </RigidBody>)}

      {support && (
        <RigidBody type="fixed" colliders={"trimesh"}>
          <group
            position={[-0.75, 2.0991, 40.5]}
            rotation={[Math.PI, -1.563, Math.PI]}
            scale={[2.319, 1.849, 2.073]}
          >
            <mesh
              geometry={nodes.Object_14.geometry}
              material={materials["Pillars.001"]}
              position={[0, 0.012, 0]}
            />
          </group>
        </RigidBody>
      )}

      {support && (
        <group rotation={[-Math.PI / 2, 0, 0]} scale={0.104}>
          <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
            <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
              <mesh
                geometry={nodes.body_lp_body_0.geometry}
                material={materials['body.001']}
                position={[115, -290, -10]}
                rotation={[0, 0.08, -1.529]}
                scale={[1.55, 1.5, 1.65]}
              />
            </group>
          </group>
        </group>
      )}

      <group
        position={[2.5, 2.099, 50.2]}
        rotation={[Math.PI, 0, -Math.PI / 2]}
        scale={[2, 1, 0.961]}
      >
        {<RigidBody type="fixed" colliders={"trimesh"}>
          <mesh
            geometry={nodes["F-material001"].geometry}
            material={materials["walls.001"]}
          />
        </RigidBody>}


       { <>
        {/* <RigidBody type='fixed' colliders={"trimesh"}>
          <mesh geometry={nodes['F-material001_2'].geometry} material={materials['walls.002']} />
          </RigidBody>
        <mesh geometry={nodes['F-material001_1'].geometry} material={materials['board.001']} /> */}
        </>}
        
      </group>

      {room && (
        <RigidBody type="fixed" colliders="trimesh">
          <mesh
            geometry={nodes["F-material023"].geometry}
            material={materials["walls.001"]}
            position={[10, 2.099, 45.587]}
            rotation={[0, 1.567, 1.571]}
            scale={[2, 1, 0.512]}
          />
        </RigidBody>
      )}

      <RigidBody type="dynamic" colliders="ball" >
        <mesh
          geometry={nodes.defaultMaterial.geometry}
          material={materials["defaultMat.001"]}
          position={[-12.102, 0.537, 44.316]}
          scale={0.1875}
        />
      </RigidBody>

    </group>
  );
}

useGLTF.preload("/wallsPillars1.glb");
